[user]
	name = Rustom Shareef
	email = rustom.shareef@gmail.com
[github]
	user = RustomMS
[core]
	editor = vim
	excludesfile = ~/.gitignore
	autocrlf = input
	whitespace = trailing-space,tab-in-indent,tabwidth=4
[color]
	 diff = auto
	 status = auto
	 branch = auto
	 interactive = auto
	 ui = auto
	 pager = on
[help]
	autocorrect = 1
[pull]
	rebase = true
[push]
	 default = simple
	 followTags = true
[fetch]
	prune = true
[diff]
	mnemonicprefix = true
	tool = vimdiff
[status]
	relativePaths = true
[commit]
	verbose = true
[alias]
	wt = worktree
	co = checkout
	nohook = -c core.hooksPath=/dev/null checkout
	ci = commit
	st = status
	br = branch
	last = log -1 HEAD
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	sparse-file = rev-parse --git-path info/sparse-checkout
	sparse-dir = rev-parse --git-path info
	top = rev-parse --show-toplevel
	type = cat-file -t
	dump = cat-file -p
	wip = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads
	amend = commit --amend
	d = diff
	ds = diff --staged
	pullr = pull --rebase
	dag = log --graph --pretty=format:'%Cblue%h%Creset -%C(yellow)%d%Creset %s%Cgreen(%cr) %C(magenta)<%an>%Creset' --abbrev-commit --date=relative
	list = show --pretty=format:'' --name-only
	extend = commit --amend -C HEAD
	f = fetch
	loll = log --graph --decorate --pretty=oneline --abbrev-commit
	one = log --pretty=oneline
	files = log --pretty=oneline --stat
	outstanding = rebase -i @{u}
	reword = commit --amend --only
	s = status
	zap = fetch -p
	day = log --reverse --no-merges --branches=* --date=local --since=midnight --author=\"$(git config --get user.name)\"
	delete-merged-branches = "!f() { git checkout --quiet main && git branch --merged | grep --invert-match '\\*' | xargs -n 1 git branch --delete; git checkout --quiet @{-1}; }; f"
	pr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git switch pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
	save = "!git add -A && git commit -m 'chore: commit save point'"

